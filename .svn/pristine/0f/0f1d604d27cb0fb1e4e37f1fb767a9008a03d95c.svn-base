import json, os, subprocess
import collections
from datetime import datetime
from flask import Blueprint, request
from app import app
from models.dashboard import get_diseases, Samples, Job, STATUS
from models.profile import User
from zipfile import ZipFile, ZIP_DEFLATED
from custom_email import send_email
rscript_path = app.config['RSCRIPT_PATH']
rdir_path = app.config['RREPO_PATH']
r_output = app.config['RREPO_OUTPUT']
base_url = app.config['BASE_URL']

apiRoute = Blueprint('api', __name__)


@apiRoute.route('/sample/api', methods=["GET"])
# @csrf.exempt
def sampleApi():
	"""
	json of job information
	:return: json object
	"""
	diseases = ["Brain Lower Grade Glioma","Breast Invasive Ductal Carcinoma","Breast Invasive Lobular Carcinoma","Breast Invasive Carcinoma","Solitary Fibrous Tumor" ]
	samples = Samples.query.filter(Samples.cancer.in_(diseases)).all()
	"""
	sampleList = [[sample.id, sample.sample_id, sample.tissue_type, sample.age_in_year, sample.site,
				   sample.gender, sample.metastatic_site, sample.cancer, 1 if sample.EGFR else 0,
				   1 if sample.IDH1 else 0, 1 if sample.IDH2 else 0, 1 if sample.TP53 else 0,
				   sample.tumor_grade, sample.tumor_stage] for sample in samples]


	sampleList = []
	for sample in samples:
		sampleList.append([sample.id, sample.sample_id, sample.tissue_type, sample.age_in_year, sample.site,
				   sample.gender, sample.metastatic_site, sample.cancer, 1 if sample.EGFR else 0,
				   1 if sample.IDH1 else 0, 1 if sample.IDH2 else 0, 1 if sample.TP53 else 0,
				   sample.tumor_grade, sample.tumor_stage])
	"""
	sampleList = []
	for sample in samples:
		d = collections.OrderedDict()
		d['id'] = sample.id
		d['sample_id'] = sample.sample_id
		d['tissue_type'] = sample.tissue_type
		d['age_in_year'] = sample.age_in_year
		d['site'] = sample.site
		d['gender'] = sample.gender
		d['metastatic_site'] = sample.metastatic_site
		d['cancer'] = sample.cancer
		d['egfr'] = 1 if sample.EGFR else 0
		d['idh1'] = 1 if sample.IDH1 else 0
		d['idh2'] = 1 if sample.IDH2 else 0
		d['tp53'] = 1 if sample.TP53 else 0
		d['tumor_grade'] = sample.tumor_grade
		d['tumor_stage'] = sample.tumor_stage
		sampleList.append(d)

	return json.dumps(sampleList)


@apiRoute.route('/sample/control/api', methods=["POST"])
# @csrf.exempt
def controlSampleApi():
	"""
	json of job information
	:return: json object
	"""
	site = ''
	sample_list = []
	if request.method == 'POST':
		data = request.get_json(force=True)
		file_path = os.path.join(app.config['RREPO_OUTPUT'], str(data['job_id']), data['file_name'])
		f = open(file_path, 'r')
		lines = f.readlines()
		site = lines[0].replace('\n', '')
		control_id = [line.replace('\n', '').replace('-', '.') for line in lines[1:]]
		samples = Samples.query.filter(Samples.sample_id.in_(control_id)).all()
		for sample in samples:
			d = collections.OrderedDict()
			d['id'] = sample.id
			d['sample_id'] = sample.sample_id
			d['tissue_type'] = sample.tissue_type
			d['age_in_year'] = sample.age_in_year
			d['site'] = sample.site
			d['gender'] = sample.gender
			d['metastatic_site'] = sample.metastatic_site
			d['cancer'] = sample.cancer
			d['egfr'] = 1 if sample.EGFR else 0
			d['idh1'] = 1 if sample.IDH1 else 0
			d['idh2'] = 1 if sample.IDH2 else 0
			d['tp53'] = 1 if sample.TP53 else 0
			d['tumor_grade'] = sample.tumor_grade
			d['tumor_stage'] = sample.tumor_stage
			sample_list.append(d)
	data = {"site": site, "samples": sample_list}
	return json.dumps(data)


@apiRoute.route('/diseases', methods=["GET"])
# @csrf.exempt
def diseases():
	diseases = get_diseases()
	return json.dumps(diseases)


@apiRoute.route('/job/api', methods=["GET"])
# @csrf.exempt
def jobApi():
	"""
	json of job information
	:return: json object
	"""
	user_id = User.query.filter_by(username='admin').first().id
	jobs = Job.query.filter(Job.user_id == user_id)
	jobList = []
	for job in jobs:
		jobList.append([job.id, job.name, STATUS[job.status], job.disease_name, job.gdc_project_id,
						job.mutation_gene, job.site, 'details'])
	data = {"data": jobList}
	return json.dumps(data)


@apiRoute.route('/job/api/<user_id>', methods=["GET"])
# @csrf.exempt
def userJobApi(user_id):
	"""
	json of job information
	:return: json object
	"""
	jobs = Job.query.filter(Job.user_id == user_id, Job.is_save == True).order_by(Job.id.desc()).all()
	jobs_list = []
	for job in jobs:
		d = dict()
		d['id'] = job.id
		d['job_name'] = job.name
		d['disease'] = job.disease
		d['status'] = STATUS[job.status]
		jobs_list.append(d)
	return json.dumps(jobs_list)


@apiRoute.route('/job/status', methods=["GET"])
# @csrf.exempt
def jobStatus():
	"""
	json of job information
	:return: json object
	"""

	jobs = Job.query.filter(Job.status <= 5).all()
	for job in jobs:
		job_id = job.id
		if job.status <= 5 and (job.is_save == 0 or not job.is_save) and job.creationTime.date() < datetime.utcnow().date():
			# Removed unwanted jobs
			job.delete(commit=True)
		elif check_pdf(job_id):
			job.update(commit=True, status=6)
			file_folder = os.path.join(app.config['RREPO_OUTPUT'], str(job.id))
			file_name = job.name.replace(' ', '_') + '.zip'
			file_path = os.path.join(file_folder, file_name)
			if not os.path.exists(file_path):
				fantasy_zip = ZipFile(file_path, 'w')
				for folder, subfolders, files in os.walk(file_folder):
					for file in files:
						if file.endswith('.pdf') or file.endswith('.csv'):
							fantasy_zip.write(os.path.join(folder, file),
											  os.path.relpath(os.path.join(folder, file), file_folder),
											  compress_type=ZIP_DEFLATED)
				fantasy_zip.close()
				# subject = "OCTAD Job Completion Status"
				# text = "Hi %s,\nPlease go to %s to see %s job details.\nThanks & Regards\nOCTAD" %(job.userDetails.username, base_url, job.name)
				# html = """
				# 			<html>
				# 				<body>
				# 					<div><h3>Hi %s</h3></div>
				# 					<p>Please click <a href='%s'>here</a> to see %s job status</p>
				# 					<p>Thanks & Regards,</p>
				# 					<p>OCTAD</p>
				# 				</body>
				# 			</html>""" % (job.userDetails.username, base_url, job.name)
				# send_email(job.userDetails.username, subject, text, html)

	return json.dumps("script completed")


def check_pdf(job_id):
	stat_path = app.config['APPLICATION_ROOT'] + '/static/data/' + str(job_id) + '/'
	flag = False
	for root, dirs, files in os.walk(stat_path):
		for file in files:
			if file.startswith("drug_enriched"):
				flag = True
	return flag


@apiRoute.route('/job/rerun', methods=["GET"])
# @csrf.exempt
def jobRerun():
	"""
	json of job information
	:return: json object
	"""

	jobs = Job.query.filter(Job.status == 5).all()
	for job in jobs:
		cmd = [rscript_path, rdir_path + 'drug_predict.R', str(job.id), 'T', str(50), str(1), 'F', 'T']
		x = subprocess.Popen(cmd)
