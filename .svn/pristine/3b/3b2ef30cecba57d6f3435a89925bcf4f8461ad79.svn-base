import subprocess, requests
from datetime import datetime
from os import walk, makedirs, chmod
from os.path import join, splitext, exists, dirname
from app import app, before_request, db
from flask import Blueprint, render_template, request, g, flash, session, url_for, redirect
from flask_login import login_user
from models.dashboard import FEATURES, get_sites, get_metastatics, get_grades, get_stages, Job, STATUS
from models.profile import User, generate_password, check_password
import json
from flask_login import login_required
rscript_path = app.config['RSCRIPT_PATH']
rdir_path = app.config['RREPO_PATH']
r_output = app.config['RREPO_OUTPUT']

dashboardRoute = Blueprint('dashboard', __name__)
dashboardRoute.before_request(before_request)


@dashboardRoute.route('/dataset', methods=["GET"])
# @login_required
def dataset():
    """
    Static page displayed
    """
    return render_template('dashboard/dataset.html')


@dashboardRoute.route('/code', methods=["GET"])
# @login_required
def code():
    """
    Static page displayed
    """
    return render_template('dashboard/code.html')


@dashboardRoute.route('/tutorials', methods=["GET"])
# @login_required
def tutorials():
    """
    Static page displayed
    """
    return render_template('dashboard/tutorials.html')


@dashboardRoute.route('/faq', methods=["GET"])
# @login_required
def faq():
    """
    Static page displayed
    """
    return render_template('dashboard/faq.html')


@dashboardRoute.route('/news', methods=["GET"])
# @login_required
def news():
    """
    Static page displayed
    """
    return render_template('dashboard/news.html')


@dashboardRoute.route('/', methods=["GET"])
# @login_required
def dashboard():
    job_type = request.args.get('rerun', False)
    job_id = request.args.get('job_id', '')
    if job_id and job_type == 'true':
        job = Job.query.filter(Job.id == job_id).first()
    else:
        job = None
    sites = get_sites()
    metastatics = get_metastatics()
    grades = get_grades()
    stages = get_stages()
    return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                           metastatics=metastatics, grades=grades, stages=stages, job=job)


@dashboardRoute.route('/output/<job_id>', methods=["GET"])
@login_required
def job_output(job_id):
    """
    IF job status is complete then only job is displayed else page is not accessible
    :param job_id:
    :return:
    """
    job = Job.query.filter(Job.id == job_id).first()
    file_name = job.name.replace(' ', '_') + '.zip'
    if job.status < 6:
        return redirect(url_for('dashboard.job_history'))
    return render_template('dashboard/output.html', job=job, file_name=file_name)


@dashboardRoute.route('/job/save/<job_id>/<disease>', methods=["POST"])
# @login_required
def save_job(job_id, disease):
    sites = get_sites()
    metastatics = get_metastatics()
    grades = get_grades()
    stages = get_stages()
    job = Job.query.filter(Job.id == job_id).first()
    if job:
        job_name = request.form['jobName']
        description = request.form['description']
        finishInfo = request.form['finishInfo']
        next_url = request.form.get('next_url', None)
        de_method = request.form.get('de_method', None)
        dz_fc_threshold = request.form.get('dz_fc_threshold', 2)
        dz_p_threshold = request.form.get('dz_p_threshold', 0.001)
        if not g.user:
            username = request.form['email']
            password = request.form['password']
            registered_user = User.query.filter_by(username=username).first()
            if registered_user is None:
                hashedPasswd = generate_password(password)
                registered_user = User(username, hashedPasswd, 0, True)
                registered_user.save()
            elif not check_password(registered_user.password, password):
                flash("Invalid credentials", category="error")
                return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                           metastatics=metastatics, grades=grades, stages=stages)
            if login_user(registered_user, remember=True):
                session['user_id'] = registered_user.id
                registered_user.update(commit=False, loginTime=datetime.utcnow())
                g.user = registered_user
                job.update(commit=False, user_id=registered_user.id, name=job_name, disease=disease,
                           description=description, is_save=True)
                db.session.commit()
                # flash("Job saved successfully")
                # return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                #            metastatics=metastatics, grades=grades, stages=stages)
            else:
                flash("User is unable to logged in so can't create job", category="error")
                return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                           metastatics=metastatics, grades=grades, stages=stages)
        else:
            job.update(commit=False, name=job_name, description=description, disease=disease, is_save=True)
            db.session.commit()
        flash("Job saved successfully")
        if finishInfo == 'true':
            if job.status < 4 and not de_method:
                flash("Invalid DE method. Please select on signature page", category="error")
                return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                                       metastatics=metastatics, grades=grades, stages=stages)
            elif job.status == 4:
                cmd = [rscript_path, rdir_path + 'drug_predict.R', str(job_id), 'T', str(50), str(1), 'F', 'T']
            elif job.status == 3:
                cmd = [rscript_path, rdir_path + 'compute_drug_predict.R', str(job_id), 'T', str(50), str(1), 'F', 'T', de_method, dz_fc_threshold, dz_p_threshold]
            else:
                flash("Please try again. Unable to create job", category="error")
                return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                                       metastatics=metastatics, grades=grades, stages=stages)
            print cmd
            try:
                x = subprocess.Popen(cmd)
                job.update(commit=False, status=5)
                db.session.commit()
            except Exception as e:
                pass
        print next_url
        return redirect(next_url if next_url and next_url != 'false' else url_for('dashboard.job_history'))
    else:
        flash("Invalid data please generate job again", category="error")
        return render_template('dashboard/dashboard.html', features=FEATURES, sites=sites,
                           metastatics=metastatics, grades=grades, stages=stages)


@dashboardRoute.route('/job_history', methods=["GET"])
@login_required
def job_history():
    # Do some stuff
    return render_template('dashboard/job.html')


@dashboardRoute.route('/chart', methods=["GET"])
# @login_required
def chart():
    filename = app.config['APPLICATION_ROOT'] + '/static/js/rc_two_cats.txt'
    upload_url = 'http://amp.pharm.mssm.edu/clustergrammer/matrix_upload/'
    r = requests.post(upload_url, files={'file': open(filename, 'rb')})
    link = r.text

    return render_template('dashboard/chart.html', xw=link)


@dashboardRoute.route('/job/case/<job_id>/<disease>', methods=["GET"])
# @login_required
def job_case(job_id, disease):
    """
    Running R script for job
    :return: json object
    """

    cmd = [rscript_path, rdir_path + 'case.R', job_id, disease]
    print cmd
    # check_output will run the command and store to result
    try:
        x = subprocess.check_output(cmd, universal_newlines=True)
        job = Job.query.filter(Job.id == job_id).first()
        job.update(commit=True, status=2)
        file_name = x.replace('[1] "', '')
        file_name = file_name.replace('"', '')
        file_name = file_name.replace('\n', '')
    except Exception as e:
        print e
        return "fail"
    print 'The maximum of the numbers is:', file_name
    return file_name


@dashboardRoute.route('/job/case/visualization', methods=["POST"])
# @login_required
def job_case_visualize():
    """
    Running R script for job case visualization
    :return: json object
    """
    if request.method == 'POST':
        data = request.get_json(force=True)
        job_id = data.get('job_id', None)
        job_id = job_id if job_id else str(Job.get_new_id())
        case_path = r_output + job_id + '/case_ids.txt'
        case_str = data['case_id']
        case_ids = case_str.split(',')
        if not exists(dirname(case_path)):
            try:
                makedirs(dirname(case_path))
            except OSError as exc:  # Guard against race condition
                print str(exc)
                return "fail"
        with open(case_path, "w") as f:
            for case in case_ids:
                f.write(case.replace('.', '-') + '\n')
            f.close()
        chmod(case_path, 0o777)
        cmd = [rscript_path, rdir_path + 'case_visualize.R', job_id, case_path]
        print cmd
        # check_output will run the command and store to result
        try:
            x = subprocess.check_output(cmd, universal_newlines=True)
            print x
            job = Job.query.filter(Job.id == job_id).first()
            job.update(commit=True, status=1)
        except Exception as e:
            print e
            return json.dumps([job_id, "fail"])
        return json.dumps([job_id, '/static/data/' + job_id + '/case.pdf'])


@dashboardRoute.route('/job/control/visualization', methods=["POST"])
# @login_required
def job_control_visualize():
    """
    Running R script for job control visualization
    :return: json object
    """
    if request.method == 'POST':
        data = request.get_json(force=True)
        try:
            job_id = data.get('job_id')
        except Exception as e:
            print e
            return json.dumps("fail")
        case_path = r_output + job_id + '/case_ids.txt'
        control_path = r_output + job_id + '/control_ids.txt'
        control_str = data['control_id']
        control_ids = control_str.split(',')
        if not exists(dirname(control_path)):
            try:
                makedirs(dirname(control_path))
            except OSError as exc:  # Guard against race condition
                print str(exc)
                return "fail"
        with open(control_path, "w") as f:
            for control in control_ids:
                f.write(control.replace('.', '-') + '\n')
            f.close()
        cmd = [rscript_path, rdir_path + 'control_visualize.R', job_id, case_path, control_path]
        print cmd
        # check_output will run the command and store to result
        try:
            x = subprocess.check_output(cmd, universal_newlines=True)
            print x
            job = Job.query.filter(Job.id == job_id).first()
            job.update(commit=True, status=3)
        except Exception as e:
            print e
            return json.dumps("fail")
        return json.dumps('/static/data/' + job_id + '/case_control.pdf')


@dashboardRoute.route('/job/compute', methods=["POST"])
# @login_required
def job_compute():
    """
    Running R script for job control visualization
    :return: json object
    """
    if request.method == 'POST':
        data = request.get_json(force=True)
        try:
            job_id = data.get('job_id')
            de_method = data.get('de_method')
            dz_p_threshold = data.get('dz_p_threshold', 0.001)
            dz_fc_threshold = data.get('dz_fc_threshold', 2)
            job = Job.query.filter(Job.id == job_id).first()
            job.update(commit=True, de_method=de_method, dz_fc_threshold=dz_fc_threshold, dz_p_threshold=dz_p_threshold)
        except Exception as e:
            print e
            return json.dumps("fail")
        case_path = r_output + job_id + '/case_ids.txt'
        control_path = r_output + job_id + '/control_ids.txt'
        cmd = [rscript_path, rdir_path + 'compute.R', job_id, case_path, control_path, de_method, dz_fc_threshold,
               dz_p_threshold]
        print cmd
        # check_output will run the command and store to result
        try:
            x = subprocess.check_output(cmd, universal_newlines=True)
            file_path = '/static/data/' + job_id + '/'
            pdf_path = app.config['APPLICATION_ROOT'] + file_path
            pdfs = []
            for dirPath, dirNames, fileNames in walk(pdf_path):
                pdfs.extend([join(file_path, fileName) for fileName in fileNames if fileName.startswith('dz_enriched_')
                             and splitext(fileName)[1].lower() in ['.pdf']])
            job.update(commit=True, status=4)
            data = {'signature': file_path + 'signature.pdf',
                    'enricher': pdfs}
        except Exception as e:
            print e
            return json.dumps("fail")
        return json.dumps(data)

